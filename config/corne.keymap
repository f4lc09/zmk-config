/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt { tapping-term-ms = <80>; };

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        go_assignment {
            bindings = <&go_assignment>;
            key-positions = <28 38 39>;
        };

        code_block {
            bindings = <&code_block>;
            key-positions = <5 39 38>;
        };

        toggle_gaming {
            bindings = <&tog 4>;
            key-positions = <36 37>;
        };

        sticky_bluetooth {
            bindings = <&sl 6>;
            key-positions = <41 40>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 36>;
        };
    };

    macros {
        code_block: code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp GRAVE &kp GRAVE &kp GRAVE &kp LS(ENTER) &kp LS(ENTER) &kp GRAVE &kp GRAVE &kp GRAVE &kp UP_ARROW>;

            label = "CODE_BLOCK";
            wait-ms = <5>;
        };

        go_assignment: go_assignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp COLON &kp EQUAL &kp SPACE>;
            label = "GO_ASSIGNMENT";
        };

        ch_lang: change_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT_SHIFT)>;
            label = "CHANGE_LANG";
        };

        shift_toctrllayer: shift_toctrllayer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &mo 7>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_SHIFT &mo 7 &kp LCTRL>;

            label = "SHIFT_TOCTRLLAYER";
        };

        ctrlshift_toctrllayer: ctrlshift_toctrllayer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LEFT_SHIFT &mo 7>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_SHIFT &mo 7 &kp LCTRL>;

            label = "CTRLSHIFT_TOCTRLLAYER";
        };

        ctrl_toaltlayer: ctrl_toaltlayer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &mo 8>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LCTRL &mo 8 &kp LEFT_ALT>;

            label = "CTRL_TOALTLAYER";
        };

        ctrlalt_toaltlayer: ctrlalt_toaltlayer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LEFT_ALT &mo 8>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LCTRL &mo 8 &kp LEFT_ALT>;

            label = "CTRLALT_TOALTLAYER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp TAB      &kp Q  &kp W  &kp E               &kp R             &kp T                 &kp Y      &kp U  &kp I      &kp O    &kp P     &kp BACKSPACE
&kp LS(TAB)  &kp A  &kp S  &kp D               &kp F             &kp G                 &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp SINGLE_QUOTE
&mo 3        &kp Z  &kp X  &kp C               &kp V             &kp B                 &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &ch_lang
                           &shift_toctrllayer  &ctrl_toaltlayer  &tp LEFT_ALT SPACE    &kp ENTER  &mo 2  &mo 1
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |    %     |   |  ^  |  &  |  *  |  (  |  )  |   \   |
            // |      |  1  |  2  |  3  |  4  |    5     |   |  -  |  =  |  `  |  [  |  ]  |  "|"  |
            // | SHFT |  6  |  7  |  8  |  9  |    0     |   |  _  |  +  |  ~  |  {  |  }  | RSHFT |
            //                     | GUI |     | ALT/ENT |   | HYPER/SPACE | BKSP |    |

            bindings = <
&trans  &kp EXCL   &kp AT    &kp HASH   &kp DLLR   &kp GRAVE      &kp CARET         &kp AMPERSAND      &kp STAR        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DELETE
&trans  &kp N1     &kp N2    &kp N3     &kp N4     &kp N5         &kp NUMBER_6      &kp NUMBER_7       &kp NUMBER_8    &kp NUMBER_9          &kp NUMBER_0           &trans
&trans  &kp MINUS  &kp PLUS  &kp UNDER  &kp EQUAL  &kp PERCENT    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH          &trans
                             &trans     &trans     &trans         &trans            &trans             &trans
            >;
        };

        commands {
            // -----------------------------------------------------------------------------------------
            // |       |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7  |  F8  |  F9  |  F10  |   |
            // |       | Prev | Next | Vol - | Vol + | Play/Pause |   |      | LFT | DWN |  UP | RGT |     |     |
            // | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |   |            |     |     |     |     |     |     |
            //                    |     |     |    |                  |     |     |     |

            bindings = <
&trans  &kp F1           &kp F2                &kp F3        &kp F4            &kp F5                  &kp F6          &kp F7          &kp F8        &kp F9           &kp F10  &trans
&trans  &kp C_PREVIOUS   &kp C_NEXT            &kp C_VOL_DN  &kp C_VOL_UP      &kp C_PLAY_PAUSE        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp F11  &trans
&trans  &kp PRINTSCREEN  &kp C_BRIGHTNESS_DEC  &kp LEFT_GUI  &kp LA(LEFT_GUI)  &kp C_BRIGHTNESS_INC    &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &kp F12  &trans
                                               &trans        &trans            &trans                  &trans          &trans          &trans
            >;
        };

        control_keys {
            bindings = <
&trans  &trans  &trans     &trans                  &trans               &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK  &mkp LCLK               &trans               &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans                  &trans               &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &ctrlshift_toctrllayer  &ctrlalt_toaltlayer  &trans    &trans  &trans  &trans
            >;
        };

        gaming {
            bindings = <
&kp TAB       &kp NUMBER_1    &kp Q  &kp W  &kp E      &kp R        &trans  &trans  &trans  &trans  &trans  &trans
&kp NUMBER_3  &kp NUMBER_2    &kp A  &kp S  &kp D      &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&kp NUMBER_4  &kp LEFT_SHIFT  &kp Z  &kp X  &kp C      &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                                     &mo 5  &kp LCTRL  &kp SPACE    &trans  &trans  &trans
            >;
        };

        extra_gaming {
            bindings = <
&trans        &kp NUMBER_5  &kp N   &trans  &kp M   &kp T     &trans  &trans  &trans  &trans  &trans  &to 0
&kp NUMBER_7  &kp NUMBER_6  &trans  &trans  &trans  &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&kp NUMBER_8  &trans        &kp Y   &kp U   &kp I   &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        bluetooth {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&sys_reset  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        ctrl {
            bindings = <
&trans     &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kt LCTRL  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        alt {
            bindings = <
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kt LEFT_ALT  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
