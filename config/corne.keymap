/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ll: ll {
            compatible = "zmk,behavior-hold-tap";
            label = "LL";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            retro-tap;
        };

        has: has {
            compatible = "zmk,behavior-hold-tap";
            label = "HAS";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        alt_to: alt_to {
            compatible = "zmk,behavior-hold-tap";
            label = "ALT_TO";
            bindings = <&alt_hold_to>, <&alt_sk_to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ctrl_to: ctrl_to {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRL_TO";
            bindings = <&ctrl_hold_to>, <&ctrl_sk_to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        code_block: code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp GRAVE &kp GRAVE &kp GRAVE &kp LS(ENTER) &kp LS(ENTER) &kp GRAVE &kp GRAVE &kp GRAVE &kp UP_ARROW>;

            label = "CODE_BLOCK";
            wait-ms = <5>;
        };

        go_assignment: go_assignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp COLON &kp EQUAL &kp SPACE>;
            label = "GO_ASSIGNMENT";
        };

        alt_sk_to: alt_sk_to {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &to 0>;
            label = "ALT_SK_TO";
        };

        alt_hold_to: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_ALT &to 0>, <&macro_press>;

            label = "NEW_MACRO";
        };

        ctrl_sk_to: ctrl_sk_to {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LCTRL &to 0>;
            label = "CTRL_SK_TO";
        };

        ctrl_hold_to: ctrl_hold_to {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LCTRL &to 0>, <&macro_press>;

            label = "CTRL_HOLD_TO";
        };

        win_hold_to: win_hold_to {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_WIN &to 0>, <&macro_press>;

            label = "WIN_HOLD_TO";
        };

        ch_lang: change_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT_SHIFT)>;
            label = "CHANGE_LANG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp TAB      &kp Q  &kp W  &kp E    &kp R           &kp T        &kp Y      &kp U     &kp I      &kp O    &kp P     &kp ESCAPE
&kp LS(TAB)  &kp A  &kp S  &kp D    &kp F           &kp G        &kp H      &kp J     &kp K      &kp L    &kp SEMI  &kp SINGLE_QUOTE
&kp LCTRL    &kp Z  &kp X  &kp C    &kp V           &kp B        &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH  &ch_lang
                           &ll 1 6  &kp LEFT_SHIFT  &kp SPACE    &kp ENTER  &kp BSPC  &mo 2
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |    %     |   |  ^  |  &  |  *  |  (  |  )  |   \   |
            // |      |  1  |  2  |  3  |  4  |    5     |   |  -  |  =  |  `  |  [  |  ]  |  "|"  |
            // | SHFT |  6  |  7  |  8  |  9  |    0     |   |  _  |  +  |  ~  |  {  |  }  | RSHFT |
            //                     | GUI |     | ALT/ENT |   | HYPER/SPACE | BKSP |    |

            bindings = <
&mo 3   &kp EXCL   &kp AT    &kp HASH   &kp DLLR   &kp GRAVE      &kp CARET         &kp AMPERSAND      &kp STAR      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &to 4
&trans  &kp N1     &kp N2    &kp N3     &kp N4     &kp N5         &kp NUMBER_6      &kp NUMBER_7       &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0           &trans
&trans  &kp MINUS  &kp PLUS  &kp UNDER  &kp EQUAL  &kp PERCENT    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans        &trans                &kp BACKSLASH          &trans
                             &trans     &trans     &trans         &trans            &trans             &trans
            >;
        };

        commands {
            // -----------------------------------------------------------------------------------------
            // |       |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7  |  F8  |  F9  |  F10  |   |
            // |       | Prev | Next | Vol - | Vol + | Play/Pause |   |      | LFT | DWN |  UP | RGT |     |     |
            // | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |   |            |     |     |     |     |     |     |
            //                    |     |     |    |                  |     |     |     |

            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4        &kp F5            &kp F6             &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp C_NEXT       &kp C_PLAY_PAUSE  &trans
&kp F7  &kp F8  &kp F9  &kp F10       &kp F11           &kp F12            &kp LEFT_ARROW  &kp DOWN_ARROW     &kp UP_ARROW  &kp RIGHT_ARROW  &trans            &trans
&trans  &trans  &trans  &trans        &trans            &trans             &kp HOME        &kp PAGE_DOWN      &kp PAGE_UP   &kp END          &trans            &trans
                        &kp LEFT_WIN  &kp LA(LEFT_WIN)  &kp PRINTSCREEN    &trans          &kp DELETE         &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans        &trans        &trans
                        &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };

        gaming {
            bindings = <
&kp TAB       &kp NUMBER_1    &kp Q  &kp W  &kp E      &kp R        &kp Y      &kp U     &kp I      &kp O    &kp P     &kp ESCAPE
&kp NUMBER_3  &kp NUMBER_2    &kp A  &kp S  &kp D      &kp F        &kp H      &kp J     &kp K      &kp L    &kp SEMI  &kp SINGLE_QUOTE
&kp NUMBER_4  &kp LEFT_SHIFT  &kp Z  &kp X  &kp C      &kp V        &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH  &tp LEFT_SHIFT CAPS
                                     &mo 5  &kp LCTRL  &kp SPACE    &kp ENTER  &kp BSPC  &mo 1
            >;
        };

        extra_gaming {
            bindings = <
&trans        &kp NUMBER_5  &kp N   &trans  &kp M   &kp T     &trans  &trans  &trans  &trans  &trans  &to 0
&kp NUMBER_7  &kp NUMBER_6  &trans  &trans  &trans  &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&kp NUMBER_8  &trans        &kp Y   &kp U   &kp I   &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        macro {
            bindings = <
&trans  &go_assignment  &trans  &trans       &trans  &code_block    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans       &trans  &trans         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans       &trans  &trans         &trans  &trans  &trans  &trans  &trans  &trans
                                &alt_to 0 0  &trans  &trans         &trans  &trans  &trans
            >;
        };
    };
};
